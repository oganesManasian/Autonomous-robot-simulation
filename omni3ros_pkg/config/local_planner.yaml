
TrajectoryPlannerROS:
  min_vel_x: -0.5
  max_vel_x: 1.4

  max_vel_theta: 0.75
  min_vel_theta: -0.75
  min_in_place_vel_theta: 0.75

  acc_lim_x: 2.5
  acc_lim_Y: 1
  acc_lim_theta: 0.25

  # The following parameters are only used if holonomic_robot is set to true, default: [-0.3, -0.1, 0.1, 0.3]
  y_vels: [-0.5, -0.3, -0.1, 0.1, 0.3, 0.5]

  holonomic_robot: true

  meter_scoring: true

  # Possible error when robot reaches goal position
  xy_goal_tolerance: 0.15
  yaw_goal_tolerance: 0.25

  vx_samples: 10 # Default 3
  vtheta_samples: 20 # Default 20

  # Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout (NOTE: 
  # In our experience DWA worked as well as Trajectory Rollout and is computationally less expensive. 
  # It is possible that robots with extremely poor acceleration limits could gain from running Trajectory
  # Rollout, but we recommend trying DWA first.), default: true
  dwa: false # We will use DWA from DWAPlannerROS

  # The amount of time to forward-simulate trajectories in seconds
  # Make sure that the minimum velocity multiplied by the sim_period is less than twice my tolerance on a goal. 
  # Otherwise, the robot will prefer to rotate in place just outside of range of its target position rather than moving towards the goal.
  sim_time: 3

  publish_cost_grid: true

DWAPlannerROS:
  # min_vel_x: -0.5 # In this case robot too often moves back instead of turning and moving forward
  min_vel_x: 0 
  max_vel_x: 1.4

  min_vel_y: -0.5 
  max_vel_y: 0.5

  min_vel_trans: 0
  max_vel_trans: 1.4

  # The absolute value of the minimum and maximum rotational velocity for the robot in rad/s
  min_rot_vel: 0
  max_rot_vel: 0.75
  
  acc_lim_x: 2.5
  acc_lim_Y: 1
  acc_lim_th: 0.25

  # Not such parameters in this planner
  # holonomic_robot: true
  # meter_scoring: true

  # The number of samples to use when exploring the x velocity space. default: 3. Was recommended to set 8-15 depending on the processing power available
  # vx_samples: 10
  # vth samples: 20

  vx_samples: 20
  vy_samples: 15
  vth samples: 40

  # Possible error when robot reaches goal position
  xy_goal_tolerance: 0.15
  yaw_goal_tolerance: 0.25

  # The amount of time to forward-simulate trajectories in seconds
  # Make sure that the minimum velocity multiplied by the sim_period is less than twice my tolerance on a goal. 
  # Otherwise, the robot will prefer to rotate in place just outside of range of its target position rather than moving towards the goal.
  sim_time: 4

  occdist_scale: 0.1 # Increased to avoid obstacles (default: 0.01)

  publish_cost_grid: true

EBandPlannerROS:
  xy_goal_tolerance: 0.15
  yaw_goal_tolerance: 0.25

  max_vel_lin: 1.4
  # min_vel_lin:

  max_vel_th: 0.35
  # min_vel_th: 

  max_acceleration: 2.5

  max_translational_acceleration: 2.5
  max_rotational_acceleration: 0.25

  differential_drive: false


TebLocalPlannerROS:

  map_frame: map 
  # Trajectory
    
  teb_autosize: True
  dt_ref: 0.3
  dt_hysteresis: 0.1
  max_samples: 500
  global_plan_overwrite_orientation: True
  allow_init_with_backwards_motion: False
  max_global_plan_lookahead_dist: 3.0
  global_plan_viapoint_sep: -1
  global_plan_prune_distance: 1
  exact_arc_length: False
  feasibility_check_no_poses: 5
  publish_feedback: True
      
  # Robot

  max_vel_x: 1.4
  max_vel_x_backwards: 0.5
  max_vel_y: 0.5
  max_vel_theta: 0.35

  acc_lim_x: 2.5
  acc_lim_y: 1
  acc_lim_theta: 0.25

  min_turning_radius: 0.0 # omni-drive robot (can turn on place!)

  footprint_model:
    type: "point"

    # type: "polygon" # Computantially expensive
    # vertices: [[0.45, 0.45], [0.45, -0.45], [-0.45, -0.45], [-0.45, 0.45]]

  # GoalTolerance

  xy_goal_tolerance: 0.2
  yaw_goal_tolerance: 0.1
  free_goal_vel: False
  complete_global_plan: True
      
  # Obstacles
      
  min_obstacle_dist: 0.7 # This value must also include our robot radius (0.45), since footprint_model is set to "point".
  inflation_dist: 0.6
  include_costmap_obstacles: True
  costmap_obstacles_behind_robot_dist: 1.0
  obstacle_poses_affected: 15
  costmap_converter_plugin: ""
  costmap_converter_spin_thread: True
  costmap_converter_rate: 5
#   # If this parameter is set to true, the motion of obstacles with non-zero velocity (provided via user-supplied obstacles on topic ~/obstacles 
#   # or obtained from the costmap_converter) is predicted and considered during optimization via a constant velocity model.
#   include_dynamic_obstacles: true

  # Optimization
      
  no_inner_iterations: 5
  no_outer_iterations: 4
  optimization_activate: True
  optimization_verbose: False
  penalty_epsilon: 0.1
  obstacle_cost_exponent: 4
  weight_max_vel_x: 2
  weight_max_vel_y: 2
  weight_max_vel_theta: 1
  weight_acc_lim_x: 1
  weight_acc_lim_y: 1
  weight_acc_lim_theta: 1
  weight_kinematics_nh: 0.1 # WE HAVE A HOLONOMIC ROBOT, JUST ADD A SMALL PENALTY # Default: 1
  weight_kinematics_forward_drive: 0.1 # Default: 1
  weight_kinematics_turning_radius: 1
  weight_optimaltime: 100 # must be > 0 Default; 1. Increasing to 100 leads to desired behaviour: robot exploits omni-dir movements
  weight_shortest_path: 0 # Default: 0
  weight_obstacle: 100 # Default: 100
  weight_inflation: 0.2
  weight_dynamic_obstacle: 10
  weight_dynamic_obstacle_inflation: 0.2
  weight_viapoint: 1 # Default: 1
  weight_adapt_factor: 2

  # Homotopy Class Planner

  enable_homotopy_class_planning: False
  # enable_multithreading: True
  # max_number_classes: 4
  # selection_cost_hysteresis: 1.0
  # selection_prefer_initial_plan: 0.9
  # selection_obst_cost_scale: 1.0
  # selection_alternative_time_cost: False
  
  # roadmap_graph_no_samples: 15
  # roadmap_graph_area_width: 5
  # roadmap_graph_area_length_scale: 1.0
  # h_signature_prescaler: 0.5
  # h_signature_threshold: 0.1
  # obstacle_heading_threshold: 0.45
  # switching_blocking_period: 0.0
  # viapoints_all_candidates: True
  # delete_detours_backwards: True
  # max_ratio_detours_duration_best_duration: 3.0
  # visualize_hc_graph: False
  # visualize_with_time_as_z_axis_scale: False

  # Recovery
  
  shrink_horizon_backup: True
  shrink_horizon_min_duration: 10
  oscillation_recovery: True
  oscillation_v_eps: 0.1
  oscillation_omega_eps: 0.1
  oscillation_recovery_min_duration: 10
  oscillation_filter_duration: 10


# For diff_drive, minimal time 
MpcLocalPlannerROS:

  odom_topic: base_pose_ground_truth
    
   ## Robot settings
  robot:
    type: "unicycle"
    unicycle:
      max_vel_x: 1.4
      max_vel_x_backwards: 0.5
      max_vel_theta: 0.35
      acc_lim_x: 2.5 # deactive bounds with zero
      dec_lim_x: 2.5 # deactive bounds with zero
      acc_lim_theta: 0.25 # deactivate bounds with zero

  ## Footprint model for collision avoidance
  footprint_model:
    type: "point"
    is_footprint_dynamic: False

  ## Collision avoidance
  collision_avoidance:
    min_obstacle_dist: 0.7 # Note, this parameter must be chosen w.r.t. the footprint_model
    enable_dynamic_obstacles: False
    force_inclusion_dist: 0.5
    cutoff_dist: 2.5 
    include_costmap_obstacles: True
    costmap_obstacles_behind_robot_dist: 1.5

  ## Planning grid 
  grid:
    type: "fd_grid"
    grid_size_ref: 20
    dt_ref: 0.3
    xf_fixed: [True, True, True]
    warm_start: True
    collocation_method: "forward_differences"
    cost_integration_method: "left_sum"
    variable_grid:
      enable: True  
      min_dt: 0.0;
      max_dt: 10.0;
      grid_adaptation:
        enable: True
        dt_hyst_ratio: 0.1
        min_grid_size: 2
        max_grid_size: 50

  ## Planning options
  planning:
    objective:
      type: "minimum_time" # minimum_time requires grid/variable_grid/enable=True and grid/xf_fixed set properly
      quadratic_form:
        state_weights: [2.0, 2.0, 2.0]
        control_weights: [1.0, 1.0]
        integral_form: False
      minimum_time_via_points:
        position_weight: 10.5
        orientation_weight: 0.0
        via_points_ordered: False
    terminal_cost:
      type: "none" # can be "none"
      quadratic:
        final_state_weights: [2.0, 2.0, 2.0]
    terminal_constraint:
      type: "none" # can be "none"
      l2_ball:
        weight_matrix: [1.0, 1.0, 1.0]
        radius: 5

  ## Controller options
  controller:
    outer_ocp_iterations: 5
    xy_goal_tolerance: 0.2
    yaw_goal_tolerance: 0.1
    global_plan_overwrite_orientation: true
    global_plan_prune_distance: 1.0
    allow_init_with_backward_motion: True
    max_global_plan_lookahead_dist: 1.5 
    global_plan_viapoint_sep: 5.5
    force_reinit_new_goal_dist: 1.0
    force_reinit_new_goal_angular: 1.57
    force_reinit_num_steps: 0
    prefer_x_feedback: False
    publish_ocp_results: False
    
  ## Solver settings
  solver:
    type: "ipopt"
    ipopt:
      iterations: 100
      max_cpu_time: -1.0
      ipopt_numeric_options:
        tol: 1e-4
      ipopt_string_options:
        linear_solver: "mumps" 
        hessian_approximation: "exact" # exact or limited-memory
    lsq_lm:
      iterations: 10
      weight_init_eq: 2
      weight_init_ineq: 2
      weight_init_bounds: 2
      weight_adapt_factor_eq: 1.5
      weight_adapt_factor_ineq: 1.5
      weight_adapt_factor_bounds: 1.5
      weight_adapt_max_eq: 500
      weight_adapt_max_ineq: 500
      weight_adapt_max_bounds: 500
