TrajectoryPlannerROS:
  min_vel_x: -0.5
  max_vel_x: 1.4

  max_vel_theta: 0.35
  min_vel_theta: -0.35
  min_in_place_vel_theta: 0.25

  acc_lim_x: 2.5
  acc_lim_Y: 1
  acc_lim_theta: 0.25

  # The following parameters are only used if holonomic_robot is set to true, default: [-0.3, -0.1, 0.1, 0.3]
  y_vels: [-0.5, -0.3, -0.1, 0.1, 0.3, 0.5]

  holonomic_robot: true

  meter_scoring: true

  # Possible error when robot reaches goal position
  xy_goal_tolerance: 0.15
  yaw_goal_tolerance: 0.25

  # Whether to use the Dynamic Window Approach (DWA)_ or whether to use Trajectory Rollout (NOTE: 
  # In our experience DWA worked as well as Trajectory Rollout and is computationally less expensive. 
  # It is possible that robots with extremely poor acceleration limits could gain from running Trajectory
  # Rollout, but we recommend trying DWA first.), default: true
  dwa: true

  # The amount of time to forward-simulate trajectories in seconds
  # Make sure that the minimum velocity multiplied by the sim_period is less than twice my tolerance on a goal. 
  # Otherwise, the robot will prefer to rotate in place just outside of range of its target position rather than moving towards the goal.
  sim_time: 2

  publish_cost_grid: true

DWAPlannerROS:
  min_vel_x: -0.5 # Moving back
  max_vel_x: 1.4

  min_vel_y: -0.5 
  max_vel_y: 0.5

  min_vel_trans: 0
  max_vel_trans: 1.5

  # The absolute value of the minimum and maximum rotational velocity for the robot in rad/s
  min_rot_vel: 0.1
  max_rot_vel: 0.35
  
  acc_lim_x: 2.5
  acc_lim_Y: 1
  acc_lim_th: 0.25

  holonomic_robot: true

  meter_scoring: true

  # The number of samples to use when exploring the x velocity space. default: 3. Was recommended to set 8-15 depending on the processing power available
  vx_samples: 10
  vth samples: 20

  # Possible error when robot reaches goal position
  xy_goal_tolerance: 0.15
  yaw_goal_tolerance: 0.25

  # The amount of time to forward-simulate trajectories in seconds
  # Make sure that the minimum velocity multiplied by the sim_period is less than twice my tolerance on a goal. 
  # Otherwise, the robot will prefer to rotate in place just outside of range of its target position rather than moving towards the goal.
  sim_time: 2

  publish_cost_grid: true

TebLocalPlannerROS:
  acc_lim_x: 2.5
  acc_lim_theta: 0.25
  max_vel_x: 1.4
  max_vel_x_backwards: 0.5
  max_vel_theta: 0.35

  max_vel_y: 0.5
  acc_lim_y: 1

  xy_goal_tolerance: 0.15
  yaw_goal_tolerance: 0.25

  footprint_model: 
    type: "polygon"
    vertices: [[0.12, 0.14], [0.12, -0.14], [-0.12, -0.14], [-0.12, 0.14]]
