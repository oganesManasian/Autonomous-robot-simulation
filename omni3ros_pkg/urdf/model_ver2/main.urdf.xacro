<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="open_base">

	<xacro:include filename="$(find omni3ros_pkg)/urdf/model_ver2/rim.urdf.xacro"/>
	<xacro:include filename="$(find omni3ros_pkg)/urdf/model_ver2/laser.urdf.xacro"/>

	<xacro:arg name="sonar" default="false"/>
	<xacro:arg name="lidar" default="true"/>
	<xacro:arg name="camera" default="true"/>

	<link name="base_link">
		<inertial>
			<mass value="10.17862944645"/>
			<inertia
				ixx="0.2035985530754"
				ixy="0"
				ixz="0"
				iyy="0.2035985530754"
				iyz="0"
				izz="0.3945961663220"/>
		</inertial>
		<visual>
			<geometry>
				<mesh filename="package://omni3ros_pkg/mesh/model_ver2/base.stl"/>
			</geometry>
			<material name="base_material">
				<color rgba="1 1 1 1"/>
			</material>
		</visual>
		<collision>
			<geometry>
				<mesh filename="package://omni3ros_pkg/mesh/model_ver2/base.stl"/>
			</geometry>
		</collision>
	</link>

	<xacro:rim_macro
		name="left"
		color="0.3 0 0"
		xyz="0.12 0.207864 0"
		rpy="1.570796326794896 0 -0.523599"/>
	<xacro:rim_macro
		name="back"
		color="0 0.3 0"
		xyz="-0.24 0 0"
		rpy="1.570796326794896 0 1.5708"/>
	<xacro:rim_macro
		name="right"
		color="0 0 0.3"
		xyz="0.12 -0.207864 0"
		rpy="1.570796326794896 0 -2.61799"/>

	<gazebo reference="base_link">
    		<material>Gazebo/White</material>
  	</gazebo>

	<gazebo reference="rim_left_link">
    		<material>Gazebo/Red</material>
  	</gazebo>

	<gazebo reference="rim_back_link">
    		<material>Gazebo/Green</material>
  	</gazebo>

	<gazebo reference="rim_right_link">
    		<material>Gazebo/Blue</material>
  	</gazebo>

	<!-- Chair -->
	<joint name="chair_joint" type="fixed">
		<axis xyz="0 1 0" />
		<origin xyz="0 0 0" rpy="0 0 1.57"/>
		<parent link="base_link"/>
		<child link="chair_frame"/>
	</joint>

	<link name="chair_frame">
		<collision>
			<origin xyz="0 0 0.7" rpy="0 0 0"/>
			<geometry>
				<box size="0.8 0.6 0.8"/>
			</geometry>
		</collision>

		<visual>
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<geometry>
				<mesh filename="package://omni3ros_pkg/mesh/model_ver2/office_chair.stl"/>
			</geometry>
		</visual>

		<inertial>
			<mass value="1e-5" />
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
		</inertial>
	</link>

	<gazebo reference="chair_frame">
    		<material>Gazebo/Gray</material>
  	</gazebo>

	<!-- Hokuyo Laser -->
	<xacro:if value="$(arg lidar)">
		<!-- <xacro:laser
			name=""
			xyz="0 0 1.3"/> -->

		<xacro:laser
			name="_left"
			xyz="0.15 0.35 .6"/>

		<xacro:laser
			name="_right"
			xyz="0.15 -0.35 .6"/>

		<joint name="laser_frame_merged_joint" type="fixed">
            <origin xyz="0.15 0 0.6" rpy="0 0 0"/>
            <parent link="base_link"/>
            <child link="laser_frame_merged"/>
        </joint>

        <link name="laser_frame_merged"/>
		

	</xacro:if>

	<!-- Sonar -->
	<xacro:if value="$(arg sonar)">
		<joint name="sonar_frame_joint" type="fixed">
			<axis xyz="0 1 0" />
			<origin xyz="0 0 .3" rpy="0 0 0"/>
			<parent link="base_link"/>
			<child link="sonar_frame"/>
		</joint>

		<link name="sonar_frame">
			<collision>
				<origin xyz="0 0 0" rpy="0 0 0"/>
				<geometry>
					<box size="0.01 0.01 0.01"/>
				</geometry>
			</collision>

			<visual>
				<origin xyz="0 0 0" rpy="0 0 0"/>
				<geometry>
					<box size="0.01 0.01 0.01"/>
				<!-- <mesh filename="package://omni3ros_pkg/mesh/hokuyo.dae"/> -->
				</geometry>
			</visual>

			<inertial>
				<mass value="1e-5" />
				<origin xyz="0 0 0" rpy="0 0 0"/>
				<inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
			</inertial>
		</link>

		<gazebo reference="sonar_frame">
			<sensor type="ray" name="TeraRanger">
				<pose>0 0 0 0 0 0</pose>
				<visualize>true</visualize>
				<update_rate>50</update_rate>
				<ray>
					<scan>
						<horizontal>
							<samples>10</samples>
							<resolution>1</resolution> 
							<min_angle>-0.14835</min_angle>
							<max_angle>0.14835</max_angle>
						</horizontal>
						<vertical>
							<samples>10</samples>
							<resolution>1</resolution> 
							<min_angle>-0.14835</min_angle>
							<max_angle>0.14835</max_angle> 
						</vertical>
					</scan>
					<range>
						<min>0.01</min>	
						<!-- TODO range is shown too small in the Gazebo and Rviz -->
						<max>4</max>
						<resolution>0.02</resolution>
					</range>
				</ray>
				<plugin filename="libgazebo_ros_range.so" name="gazebo_ros_range">
					<!-- <gaussianNoise>0.005</gaussianNoise> -->
					<alwaysOn>true</alwaysOn>
					<updateRate>50</updateRate>
					<topicName>sonar</topicName>
					<frameName>sonar_frame</frameName>
					<radiation>ultrasound</radiation>
					<fov>0.2967</fov>
				</plugin>
			</sensor>  
		</gazebo>
	</xacro:if>

	<!-- RGBD Camera -->

	<!-- Intel realsense -->

	<!-- <xacro:include filename="$(find omni3ros_pkg)/urdf/_d435.urdf.xacro"/> -->

	<!-- <xacro:include filename="$(find omni3ros_pkg)/urdf/_d435.urdf.xacro"> 
		<sensor_d435 parent="$base_link"></sensor_d435>
	</xacro:include> -->

	<!-- Kinnect -->
	<xacro:if value="$(arg camera)">
		<joint name="camera_frame_joint" type="fixed">
			<axis xyz="0 1 0" />
			<!-- Positive pitch so camera looks downwards to see ground obstacles -->
			<origin xyz="0 0 .6" rpy="0 0.25 0"/> 
			<parent link="base_link"/>
			<child link="camera_frame"/>
		</joint>

		<link name="camera_frame">
			<collision name="collision">
				<origin xyz="0 0 0" rpy="0 0 0"/>
				<geometry>
					<box size="0.073000 0.276000 0.072000"/>
				</geometry>
			</collision>

			<visual name="visual">
				<origin xyz="0 0 0" rpy="0 0 0"/>
				<geometry>
					<mesh filename="package://omni3ros_pkg/mesh/kinect.dae"/>
				</geometry>
			</visual>

			<inertial>
				<mass value="0.1" />
				<origin xyz="0 0 0" rpy="0 0 0"/>
				<inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
			</inertial>
		</link>

		<!-- Need this since rviz frame does not match the kinects own frame. So for visualizing the kinect 
		model correctly in gazebo and rviz you need 1 transform, but to transform the data you need another. 
		https://answers.ros.org/question/329409/point-cloud-in-wrong-position-relative-to-robot/ -->
		<joint name="camera_optical_joint" type="fixed">
            <origin xyz="0 0 0" rpy="-1.5708 0 -1.5708"/>
            <parent link="camera_frame"/>
            <child link="camera_frame_optical"/>
        </joint>

        <link name="camera_frame_optical"/>

		<gazebo reference="camera_frame">
			<sensor type="depth" name="camera">
				<update_rate>20</update_rate>
				<camera>
					<horizontal_fov>1.047198</horizontal_fov>
					<image>
						<width>640</width>
						<height>480</height>
						<format>R8G8B8</format>
					</image>
					<!-- In default setup it was turned on, however it's doesn't make sense  -->
					<!-- <clip>
						<near>0.05</near>
						<far>3</far>
					</clip> -->
				</camera>

				<plugin name="camera_plugin" filename="libgazebo_ros_openni_kinect.so">
					<baseline>0.2</baseline>
					<alwaysOn>true</alwaysOn>
					<!-- Keep this zero, update_rate in the parent <sensor> tag
						will control the frame rate. -->
					<updateRate>0.0</updateRate>
					<cameraName>camera_ir</cameraName>
					<imageTopicName>/camera/color/image_raw</imageTopicName>
					<cameraInfoTopicName>/camera/color/camera_info</cameraInfoTopicName>
					<depthImageTopicName>/camera/depth/image_raw</depthImageTopicName>
					<depthImageCameraInfoTopicName>/camera/depth/camera_info</depthImageCameraInfoTopicName>
					<pointCloudTopicName>/camera/depth/points</pointCloudTopicName>
					<frameName>camera_frame_optical</frameName>
					<pointCloudCutoff>0.5</pointCloudCutoff>
					<pointCloudCutoffMax>3.0</pointCloudCutoffMax>
					<distortionK1>0</distortionK1>
					<distortionK2>0</distortionK2>
					<distortionK3>0</distortionK3>
					<distortionT1>0</distortionT1>
					<distortionT2>0</distortionT2>
					<CxPrime>0</CxPrime>
					<Cx>0</Cx>
					<Cy>0</Cy>
					<focalLength>0</focalLength>
					<hackBaseline>0</hackBaseline>
				</plugin>
			</sensor>
		</gazebo>
	</xacro:if> 

	<!-- IMU -->
	<gazebo>
		<plugin name="gazebo_ros_imu" filename="libgazebo_ros_imu.so">
			<alwaysOn>true</alwaysOn>
			<bodyName>base_link</bodyName>
			<topicName>imu</topicName>
			<serviceName>imu_service</serviceName>
			<gaussianNoise>0.0</gaussianNoise>
			<updateRate>50.0</updateRate>
		</plugin>
	</gazebo>

	<!-- ROS control -->
	<gazebo>
		<plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
		<robotNamespace>/open_base</robotNamespace>
		</plugin>
	</gazebo>
	
</robot>