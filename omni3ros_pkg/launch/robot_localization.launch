<launch>
   <!-- Odom node (Encoders + IMU) -->
   <node pkg="robot_localization" type="ekf_localization_node" name="ekf_odom_node" output="screen" >
       <param name="frequency" value="50"/>
       <!-- <param name="sensor_timeout" value="0.1"/> -->
       <param name="two_d_mode" value="true"/>
       <!-- <remap from="odometry/filtered" to="odom/ekf/enc_imu"/> -->
       <param name="map_frame" value="map"/>
       <param name="odom_frame" value="odom"/>
       <param name="base_link_frame" value="base_link"/>
       <param name="world_frame" value="odom"/>
       <!-- <param name="transform_time_offset" value="0.0"/> -->

        <!-- Wheel odometry (pose(x, y), orientation_quaternion(x,y,z,th), linear_velocity (x', y'), angular_velocity (th')) -->
       <param name="odom0" value="/odom"/>
       <param name="odom0_differential" value="false" />
       <param name="odom0_relative" value="false" />
       <param name="odom0_queue_size" value="10" />
       <!-- Rosparam config vector description
       [x_pos   , y_pos    , z_pos,
        roll    , pitch    , yaw,
        x_vel   , y_vel    , z_vel,
        roll_vel, pitch_vel, yaw_vel,
        x_accel , y_accel  , z_accel] -->
       <rosparam param="odom0_config">[false, false, false,
                                       false, false, false,
                                       true, true, false,
                                       false, false, true,
                                       false, false, false]</rosparam>


      <!-- IMU (orientation_quaternion (x,y,z,w), angular_velocity (x,y,z), linear_acceleration (x,y,z)) -->
       <param name="imu0" value="/imu"/>
       <param name="imu0_differential" value="false" />
       <param name="imu0_relative" value="true" />
       <param name="imu0_queue_size" value="10" />
       <param name="imu0_remove_gravitational_acceleration" value="true" />
        <!-- Rosparam config vector description
       [x_pos   , y_pos    , z_pos,
        roll    , pitch    , yaw,
        x_vel   , y_vel    , z_vel,
        roll_vel, pitch_vel, yaw_vel,
        x_accel , y_accel  , z_accel] -->
       <rosparam param="imu0_config">[false, false, false,
                                      false, false, true,
                                      false, false, false,
                                      false , false, true,
                                      <!-- true, true, false]</rosparam> Accelerations are not really needed for case of our robot -->
                                      false, false, false]</rosparam>

        <!-- # [ADVANCED] This represents the initial value for the state estimate error covariance matrix. Setting a diagonal
        # value (variance) to a large value will result in rapid convergence for initial measurements of the variable in
        # question. Users should take care not to use large values for variables that will not be measured directly. The values
        # are ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below
        #if unspecified. -->

        <!-- The estimate covariance, commonly denoted P, defines the error in the current state estimate. The parameter allows 
        users to set the initial value for the matrix, which will affect how quickly the filter converges. For example, if users 
        set the value at position [0,0] to a very small value, e.g., 1e-12, and then attempt to fuse measurements of X position 
        with a high variance value for X, then the filter will be very slow to “trust” those measurements, and the time required 
        for convergence will increase. Again, users should take care with this parameter. When only fusing velocity data (e.g., no 
        absolute pose information), users will likely not want to set the initial covariance values for the absolute pose variables 
        to large numbers. This is because those errors are going to grow without bound (owing to the lack of absolute pose measurements 
        to reduce the error), and starting them with large values will not benefit the state estimate. -->


        <rosparam param="initial_estimate_covariance">
                                                        <!-- x, y, z -->
                                                        [1e-9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                        0, 1e-9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                        0, 0, 1e-9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                        <!-- roll, pitch, yaw -->
                                                        0, 0, 0, 1e-9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                        0, 0, 0, 0, 1e-9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                        0, 0, 0, 0, 0, 1e-9, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                        <!-- vx, vy, vz, -->
                                                        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                                                        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                                                        0, 0, 0, 0, 0, 0, 0, 0, 1e-9, 0, 0, 0, 0, 0, 0,
                                                        <!-- roll, vpitch, vyaw -->
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0,
                                                        <!-- ax, ay, az -->
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1e-9, 0,
                                                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1e-9]</rosparam>

        <!-- # [ADVANCED] The process noise covariance matrix can be difficult to tune, and can vary for each application, so it is
        # exposed as a configuration parameter. This matrix represents the noise we add to the total error after each
        # prediction step. The better the omnidirectional motion model matches your system, the smaller these values can be.
        # However, if users find that a given variable is slow to converge, one approach is to increase the
        # process_noise_covariance diagonal value for the variable in question, which will cause the filter's predicted error
        # to be larger, which will cause the filter to trust the incoming measurement more during correction. The values are
        # ordered as x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az. Defaults to the matrix below if
        # unspecified. -->

        <!-- The process noise covariance, commonly denoted Q, is used to model uncertainty in the prediction stage of the filtering algorithms. 
        It can be difficult to tune, and has been exposed as a parameter for easier customization. This parameter can be left alone, but you will 
        achieve superior results by tuning it. In general, the larger the value for Q relative to the variance for a given variable in an input message, 
        the faster the filter will converge to the value in the measurement. -->

        <rosparam param="process_noise_covariance">[0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                    0, 0.05, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                    0, 0, 0.06, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                    0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                    0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                    0, 0, 0, 0, 0, 0.06, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                                    0, 0, 0, 0, 0, 0, 0.025,0, 0, 0, 0, 0, 0, 0, 0,
                                                    0, 0, 0, 0, 0, 0, 0, 0.025,0, 0, 0, 0, 0, 0, 0,
                                                    0, 0, 0, 0, 0, 0, 0, 0, 0.04, 0, 0, 0, 0, 0, 0,
                                                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0, 0,
                                                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0, 0, 0,
                                                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.02, 0, 0, 0,
                                                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0, 0,
                                                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.01, 0,
                                                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.005]</rosparam>

       <param name="print_diagnostics" value="true" />

   </node>
 
</launch>